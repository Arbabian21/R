IMP1 <- impulsivity[, c(1,2,3,4,5,6) ]
IMP2 <- impulsivity[, c(1,2,3,4,5,7) ]
IMP3 <- impulsivity[, c(1,2,3,4,5,8) ]
IMP4 <- impulsivity[, c(1,2,3,4,5,9) ]
IMP5 <- impulsivity[, c(1,2,3,4,5,10) ]
names(IMP1)[6] <- "IMP"
names(IMP2)[6] <- "IMP"
names(IMP3)[6] <- "IMP"
names(IMP4)[6] <- "IMP"
names(IMP5)[6] <- "IMP"
impulisvity <- merge(IMP1, IMP2, by = "Subject")
impulisvity <- merge(impulisvity, IMP3, by = "Subject")
impulisvity <- merge(impulisvity, IMP4, by = "Subject")
impulisvity <- merge(impulisvity, IMP5, by = "Subject")
impulisvity <- merge(IMP1, IMP2[6], by = "Subject")
impulisvity <- merge(IMP1, IMP2[6], by = "Subject" && "TRT" && "Gender" && "Age" && "PTest")
impulisvity <- merge(IMP1, IMP2[6], by = "Subject" && by = by = "TRT" && by ="Gender" && by = "Age" && by = "PTest")
setwd("~/R/Lecture12")
#####################################################
#
# Wide to Long
#
#####################################################
# Read in our data
cycler <- read.csv("../DataSets/CyclerCPK.csv", header = TRUE)
# Subset for time 1
cpk1 <- cycler[, c(1, 2, 3, 4, 5)]
# Subset for time 1
cpk2 <- cycler[, c(1, 2, 3, 4, 6)]
# Subset for time 1
cpk3 <- cycler[, c(1, 2, 3, 4, 7)]
# Subset for time 1
cpk4 <- cycler[, c(1, 2, 3, 4, 8)]
# Change the column names for cpk
names(cpk1)[5] <- "CPK"
names(cpk2)[5] <- "CPK"
names(cpk3)[5] <- "CPK"
names(cpk4)[5] <- "CPK"
n1 <- nrow(cycler)
cpk1a <- cbind(cpk1, trial = rep(1, n1))
cpk2a <- cbind(cpk2, trial = rep(2, n1))
cpk3a <- cbind(cpk3, trial = rep(3, n1))
cpk4a <- cbind(cpk4, trial = rep(4, n1))
# Stack them on top of each other
cpkstack <- rbind(cpk1a, cpk2a, cpk3a, cpk4a)
View(cycler)
setwd("~/")
setwd("~/")
impulsivity <- read.csv("R/DataSets/Impulsivity1.csv")
IMP1 <- impulsivity[, c(1,2,3,4,5,6) ]
IMP2 <- impulsivity[, c(1,2,3,4,5,7) ]
IMP3 <- impulsivity[, c(1,2,3,4,5,8) ]
IMP4 <- impulsivity[, c(1,2,3,4,5,9) ]
IMP5 <- impulsivity[, c(1,2,3,4,5,10) ]
names(IMP1)[6] <- "IMP"
names(IMP2)[6] <- "IMP"
names(IMP3)[6] <- "IMP"
names(IMP4)[6] <- "IMP"
names(IMP5)[6] <- "IMP"
n1 <- nrow(impulisvity)
impulsivity <- read.csv("R/DataSets/Impulsivity1.csv")
IMP1 <- impulsivity[, c(1,2,3,4,5,6) ]
IMP2 <- impulsivity[, c(1,2,3,4,5,7) ]
IMP3 <- impulsivity[, c(1,2,3,4,5,8) ]
IMP4 <- impulsivity[, c(1,2,3,4,5,9) ]
IMP5 <- impulsivity[, c(1,2,3,4,5,10) ]
names(IMP1)[6] <- "IMP"
names(IMP2)[6] <- "IMP"
names(IMP3)[6] <- "IMP"
names(IMP4)[6] <- "IMP"
names(IMP5)[6] <- "IMP"
n1 <- nrow(impulsivity)
impulsivity <- cbind(IMP1, trial = rep(1, n1))
View(impulsivity)
impulsivity <- read.csv("R/DataSets/Impulsivity1.csv")
IMP1 <- impulsivity[, c(1,2,3,4,5,6) ]
IMP2 <- impulsivity[, c(1,2,3,4,5,7) ]
IMP3 <- impulsivity[, c(1,2,3,4,5,8) ]
IMP4 <- impulsivity[, c(1,2,3,4,5,9) ]
IMP5 <- impulsivity[, c(1,2,3,4,5,10) ]
names(IMP1)[6] <- "IMP"
names(IMP2)[6] <- "IMP"
names(IMP3)[6] <- "IMP"
names(IMP4)[6] <- "IMP"
names(IMP5)[6] <- "IMP"
n1 <- nrow(impulsivity)
IMP1 <- cbind(IMP1, trial = rep(1, n1))
IMP2 <- cbind(IMP2, trial = rep(2, n1))
IMP3 <- cbind(IMP3, trial = rep(3, n1))
IMP4 <- cbind(IMP4, trial = rep(4, n1))
IMP5 <- cbind(IMP5, trial = rep(5, n1))
# Stack them on top of each other
IMPStack <- rbind(IMP1, IMP2, IMP3, IMP4, IMP5)
View(IMPStack)
setwd("~/R/Lecture21")
clear
#####################################################
#
# Functions in R
#
#####################################################
# Basic format for a function in R
# FunctionName <- function(Inputs)
# {
# Do stuff to Inputs to generate Outputs
# return (Outputs)
# }
Cubic1 <- function(x)
{
Output1 <- 3*x^3 + 2*x^2 + 1*x + 7
return(Output1)
}
Cubic1(3)
Cubic1(seq(-5, 5, by = 02))
#####################################################
#
# Functions in R
#
#####################################################
# Basic format for a function in R
# FunctionName <- function(Inputs)
# {
# Do stuff to Inputs to generate Outputs
# return (Outputs)
# }
Cubic1 <- function(x)
{
Output1 <- 3*x^3 + 2*x^2 + 1*x + 7
return(Output1)
}
Cubic1(3)
Cubic1(seq(-5, 5, by = 02))
plot(seq(-5, 5, by = 02), C1, type = 'l')
#####################################################
#
# Functions in R
#
#####################################################
# Basic format for a function in R
# FunctionName <- function(Inputs)
# {
# Do stuff to Inputs to generate Outputs
# return (Outputs)
# }
Cubic1 <- function(x)
{
Output1 <- 3*x^3 + 2*x^2 + 1*x + 7
return(Output1)
}
Cubic1(3)
C1 <- Cubic1(seq(-5, 5, by = 02))
plot(seq(-5, 5, by = 02), C1, type = 'l')
#####################################################
#
# Functions in R
#
#####################################################
# Basic format for a function in R
# FunctionName <- function(Inputs)
# {
# Do stuff to Inputs to generate Outputs
# return (Outputs)
# }
Cubic1 <- function(x)
{
Output1 <- 3*x^3 + 2*x^2 + 1*x + 7
return(Output1)
}
Cubic1(3)
C1 <- Cubic1(seq(-5, 5, by = 0.2))
plot(seq(-5, 5, by = 02), C1, type = 'l')
#####################################################
#
# Functions in R
#
#####################################################
# Basic format for a function in R
# FunctionName <- function(Inputs)
# {
# Do stuff to Inputs to generate Outputs
# return (Outputs)
# }
Cubic1 <- function(x)
{
Output1 <- 3*x^3 + 2*x^2 + 1*x + 7
return(Output1)
}
Cubic1(3)
C1 <- Cubic1(seq(-5, 5, by = 0.2))
plot(seq(-5, 5, by = 0.2), C1, type = 'l')
#####################################################
#
# Functions in R
#
#####################################################
# Basic format for a function in R
# FunctionName <- function(Inputs)
# {
# Do stuff to Inputs to generate Outputs
# return (Outputs)
# }
Cubic1 <- function(x)
{
Output1 <- 3*x^3 + 2*x^2 + 1*x + 7
return(Output1)
}
Cubic1(3)
C1 <- Cubic1(seq(-5, 5, by = 0.2))
plot(seq(-5, 5, by = 0.2), C1, type = 'l')
Cubic1 <- function(x, a, b, c, d)
{
Output1 <- a*x^3 + b*x^2 + c*x + d
return(Output1)
}
Cubic1(3, a = 1, b = 1, c = 1, d = 1)
#####################################################
#
# Functions in R
#
#####################################################
# Basic format for a function in R
# FunctionName <- function(Inputs)
# {
# Do stuff to Inputs to generate Outputs
# return (Outputs)
# }
Cubic1 <- function(x)
{
Output1 <- 3*x^3 + 2*x^2 + 1*x + 7
return(Output1)
}
Cubic1(3)
C1 <- Cubic1(seq(-5, 5, by = 0.2))
plot(seq(-5, 5, by = 0.2), C1, type = 'l')
Cubic1 <- function(x, a, b, c, d)
{
Output1 <- a*x^3 + b*x^2 + c*x + d
return(Output1)
}
Cubic1(3, a = 1, b = 1, c = 1, d = 1)
# Part 2
fun2 <- function(x)
{
if(x < 0 | x > 1)
res1 <- 0
else
res1 <- x^2(1-x)^4
return(res1)
}
fun2(5)
#####################################################
#
# Functions in R
#
#####################################################
# Basic format for a function in R
# FunctionName <- function(Inputs)
# {
# Do stuff to Inputs to generate Outputs
# return (Outputs)
# }
Cubic1 <- function(x)
{
Output1 <- 3*x^3 + 2*x^2 + 1*x + 7
return(Output1)
}
Cubic1(3)
C1 <- Cubic1(seq(-5, 5, by = 0.2))
plot(seq(-5, 5, by = 0.2), C1, type = 'l')
Cubic1 <- function(x, a, b, c, d)
{
Output1 <- a*x^3 + b*x^2 + c*x + d
return(Output1)
}
Cubic1(3, a = 1, b = 1, c = 1, d = 1)
# Part 2
fun2 <- function(x)
{
if(x < 0 | x > 1)
res1 <- 0
else
res1 <- x^2(1-x)^4
return(res1)
}
fun2(5)
fun2(-1)
fun2(.5)
#####################################################
#
# Functions in R
#
#####################################################
# Basic format for a function in R
# FunctionName <- function(Inputs)
# {
# Do stuff to Inputs to generate Outputs
# return (Outputs)
# }
Cubic1 <- function(x)
{
Output1 <- 3*x^3 + 2*x^2 + 1*x + 7
return(Output1)
}
Cubic1(3)
C1 <- Cubic1(seq(-5, 5, by = 0.2))
plot(seq(-5, 5, by = 0.2), C1, type = 'l')
Cubic1 <- function(x, a, b, c, d)
{
Output1 <- a*x^3 + b*x^2 + c*x + d
return(Output1)
}
Cubic1(3, a = 1, b = 1, c = 1, d = 1)
# Part 2
fun2 <- function(x)
{
if(x < 0 | x > 1)
res1 <- 0
else
res1 <- x^2*(1-x)^4
return(res1)
}
fun2(5)
fun2(-1)
fun2(.5)
#####################################################
#
# Functions in R
#
#####################################################
# Basic format for a function in R
# FunctionName <- function(Inputs)
# {
# Do stuff to Inputs to generate Outputs
# return (Outputs)
# }
Cubic1 <- function(x)
{
Output1 <- 3*x^3 + 2*x^2 + 1*x + 7
return(Output1)
}
Cubic1(3)
C1 <- Cubic1(seq(-5, 5, by = 0.2))
plot(seq(-5, 5, by = 0.2), C1, type = 'l')
Cubic1 <- function(x, a, b, c, d)
{
Output1 <- a*x^3 + b*x^2 + c*x + d
return(Output1)
}
Cubic1(3, a = 1, b = 1, c = 1, d = 1)
# Part 2
fun2 <- function(x)
{
if(x < 0 | x > 1)
res1 <- 0
else
res1 <- x^2*(1-x)^4
return(res1)
}
fun2(5)
fun2(-1)
fun2(.5)
x1 <- seq(-1, 2, by = .01)
fun2(x2)
#####################################################
#
# Functions in R
#
#####################################################
# Basic format for a function in R
# FunctionName <- function(Inputs)
# {
# Do stuff to Inputs to generate Outputs
# return (Outputs)
# }
Cubic1 <- function(x)
{
Output1 <- 3*x^3 + 2*x^2 + 1*x + 7
return(Output1)
}
Cubic1(3)
C1 <- Cubic1(seq(-5, 5, by = 0.2))
plot(seq(-5, 5, by = 0.2), C1, type = 'l')
Cubic1 <- function(x, a, b, c, d)
{
Output1 <- a*x^3 + b*x^2 + c*x + d
return(Output1)
}
Cubic1(3, a = 1, b = 1, c = 1, d = 1)
# Part 2
fun2 <- function(x)
{
if(x < 0 | x > 1)
res1 <- 0
else
res1 <- x^2*(1-x)^4
return(res1)
}
fun2(5)
fun2(-1)
fun2(.5)
x1 <- seq(-1, 2, by = .01)
fun2(x1)
#####################################################
#
# Functions in R
#
#####################################################
# Basic format for a function in R
# FunctionName <- function(Inputs)
# {
# Do stuff to Inputs to generate Outputs
# return (Outputs)
# }
Cubic1 <- function(x)
{
Output1 <- 3*x^3 + 2*x^2 + 1*x + 7
return(Output1)
}
Cubic1(3)
C1 <- Cubic1(seq(-5, 5, by = 0.2))
plot(seq(-5, 5, by = 0.2), C1, type = 'l')
Cubic1 <- function(x, a, b, c, d)
{
Output1 <- a*x^3 + b*x^2 + c*x + d
return(Output1)
}
Cubic1(3, a = 1, b = 1, c = 1, d = 1)
# Part 2
fun2 <- function(x)
{
if(x < 0 | x > 1)
res1 <- 0
else
res1 <- x^2*(1-x)^4
return(res1)
}
fun2(5)
fun2(-1)
fun2(.5)
# Not work
# x1 <- seq(-1, 2, by = .01)
# fun2(x1)
fun3 <- function(x)
{
n1 <- length(x) # Determine length of x
res1 <- rep(0, n1) # Create a container to hold results
for (i in 1:n1) # Loop through all x's
{
if(x[i] < 0 | x[i] > 1) # logic to determine bounds
res1[i] <- 0 # if we are out of bounds
else
res1[i] <- x^2*(1-x)^4 # calc the function
}
return(res1) # return the function
}
y1 <- fun3(x1)
plot(x1, y1, type = 'l')
#####################################################
#
# Functions in R
#
#####################################################
# Basic format for a function in R
# FunctionName <- function(Inputs)
# {
# Do stuff to Inputs to generate Outputs
# return (Outputs)
# }
Cubic1 <- function(x)
{
Output1 <- 3*x^3 + 2*x^2 + 1*x + 7
return(Output1)
}
Cubic1(3)
C1 <- Cubic1(seq(-5, 5, by = 0.2))
plot(seq(-5, 5, by = 0.2), C1, type = 'l')
Cubic1 <- function(x, a, b, c, d)
{
Output1 <- a*x^3 + b*x^2 + c*x + d
return(Output1)
}
Cubic1(3, a = 1, b = 1, c = 1, d = 1)
# Part 2
fun2 <- function(x)
{
if(x < 0 | x > 1)
res1 <- 0
else
res1 <- x^2*(1-x)^4
return(res1)
}
fun2(5)
fun2(-1)
fun2(.5)
# Not work
# x1 <- seq(-1, 2, by = .01)
# fun2(x1)
fun3 <- function(x)
{
n1 <- length(x) # Determine length of x
res1 <- rep(0, n1) # Create a container to hold results
for (i in 1:n1) # Loop through all x's
{
if(x[i] < 0 | x[i] > 1) # logic to determine bounds
res1[i] <- 0 # if we are out of bounds
else
res1[i] <- x[i]^2*(1-x[i])^4 # calc the function
}
return(res1) # return the function
}
y1 <- fun3(x1)
plot(x1, y1, type = 'l')
